swagger: '2.0'
info:
  version: 0.1.0
  title: slr-api
  description: 'basic [slr-api](https://github.com/TrentoCrowdAI/slr-api) calls'
host: crowdai-slr-api-dev.herokuapp.com
basePath: /v1
schemes:
  - https
consumes:
  - application/json
  - multipart/form-data

produces:
  - application/json
tags:
  - name: Papers
    description: Search or manage papers
  - name: Projects
    description: Manage the projects
  - name: Projects Papers
    description: Manage the papers of a project
  - name: Users
    description: Manage the users
  - name: Filters
    description: Manage the filters
  - name: Screenings
    description: Manage the screenings
  - name: Votes
    description: Manage the votes


paths:

  # normal search ==============================================================

  '/search':
    get:
      summary: search for papers
      description: >-
        Using a natural language string. Or search for related papers given an
        ID. Multiple options can be set for the search
      tags:
        - Papers
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Query'
        - $ref: '#/parameters/SearchBy'
        - $ref: '#/parameters/Year'
        - $ref: '#/parameters/OrderByForSearch'
        - $ref: '#/parameters/Sort'
        - $ref: '#/parameters/Start'
        - $ref: '#/parameters/Count'
        - $ref: '#/parameters/Scopus'
        - $ref: '#/parameters/ArXiv'

      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Result_of_paper_search'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

  # similar search ==============================================================

  '/search/similar':
    post:
      summary: search the similar paper
      description: >-
        search the similar paper
      tags:
        - Papers
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Similar_paper_post_body'

      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Result_of_paper_search'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

  # similar search ==============================================================

  '/search/automated':
    post:
      summary: automated search
      description: >-
        automated search by a specific topic
      tags:
        - Papers
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Automated_search_post_body'

      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Result_of_paper_search_with_automated_search_confidence'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

  # projects ==============================================================

  '/projects':

    get:
      summary: Returns all projects
      description: >-
        Returns a list of projects(max 10)
      tags:
        - Projects
      security:
        - basicAuth: []

      parameters:

        - $ref: '#/parameters/OrderBy'
        - $ref: '#/parameters/Sort'
        - $ref: '#/parameters/Start'
        - $ref: '#/parameters/Count'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Result_projects'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

    post:
      summary: Add new project
      description: >-
        Add an empty project with a given title and description
      tags:
        - Projects
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_post_put_body'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Project'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '500':
          $ref: '#/responses/500_internal_server_error'


  '/projects/{project_id}':

    get:
      summary: access a specific project
      description: Get the basic data of a project
      tags:
        - Projects
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_id_in_path'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Project'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

    put:
      summary: update a specific project
      description: Overwrites the existing project
      tags:
        - Projects
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_id_in_path'
        - $ref: '#/parameters/Project_post_put_body'
      responses:
        '200':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

    delete:
      summary: delete a specific project
      tags:
        - Projects
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_id_in_path'
      responses:
        '204':
          $ref: '#/responses/204_no_content'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

  # collaborators  ==============================================================

  '/projects/{project_id}/collaborators':

    get:
      summary: get collaborators by project id
      description: get a list of collaborator
      tags:
        - Projects
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/parameters/Project_id_in_path'

      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Users'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'


    post:
      summary: add the collaborator
      description: share a specific project with another user
      tags:
        - Projects
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_id_in_path'
        - $ref: '#/parameters/Email_post_body'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '500':
          $ref: '#/responses/500_internal_server_error'


  '/projects/{project_id}/collaborators/{user_id}':

    delete:
      summary: delete the collaborator
      description: delete the sharing of a specific project with another user
      tags:
        - Projects
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_id_in_path'
        - $ref: '#/parameters/User_id_in_path'
      responses:
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '500':
          $ref: '#/responses/500_internal_server_error'



# screeners users ===========================================================
  '/projects/{project_id}/screeners':

    get:
      summary: get the screeners by project id
      description: get a list of screeners
      tags:
        - Projects
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/parameters/Project_id_in_path'

      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Users'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

    post:
      summary: add the screening by array
      description: add the screening in the table by array
      tags:
        - Screenings
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_id_in_path'
        - $ref: '#/parameters/Screenings_post_body'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Screenings'
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '500':
          $ref: '#/responses/500_internal_server_error'

    put:
      summary: add the screening after starting
      description: add the screening after starting manual screening
      tags:
        - Screenings
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_id_in_path'
        - $ref: '#/parameters/Screenings_put_body'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Screenings'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '500':
          $ref: '#/responses/500_internal_server_error'



  # projectPaper ==============================================================

  '/papers':
    get:
      summary: access the papers of a project
      description: Get a list of projectPapers associated with a project
      tags:
        - Projects Papers
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_id'
        - $ref: '#/parameters/Type'
        - $ref: '#/parameters/OrderBy'
        - $ref: '#/parameters/Sort'
        - $ref: '#/parameters/Start'
        - $ref: '#/parameters/Count'

      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Result_of_paper_search_with_screened_result'
#            $ref: '#/definitions/Project_papers'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

    post:
      summary: add new paper to specific project
      description: copy the paper from local paper table into a project_paper table
      tags:
        - Projects Papers
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_paper_post_body'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Project_paper'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'


  '/papers/{project_paper_id}':
    get:
      summary: access a specific paper of a project
      description: This works only with internals id
      tags:
        - Projects Papers
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_paper_id_in_path'

      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Paper_data_with_screened_result'
#            $ref: '#/definitions/Project_paper'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

    put:
      summary: update a specific paper of a project
      description: Overwrites the existing paper
      tags:
        - Projects Papers
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_paper_id_in_path'
        - $ref: '#/parameters/Paper_post_put_body'
      responses:
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

    delete:
      summary: delete a specific paper of a project
      tags:
        - Projects Papers
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_paper_id_in_path'
      responses:
        '204':
          $ref: '#/responses/204_no_content'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

  '/customPapers':

    post:
      summary: add new manual paper to specific project
      description: insert the new paper by form
      tags:
        - Projects Papers
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_paper_custom_post_body'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Project_paper'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'






  # filters ==============================================================

  '/filters':
    get:
      summary: select the filters of a project
      description: Get a list of filter associated with a project
      tags:
        - Filters
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_id'
        - $ref: '#/parameters/Start'
        - $ref: '#/parameters/Count'

      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Filters'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

    post:
      summary: insert a filter
      description: add new filter to specific project
      tags:
        - Filters
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Filter_post_body'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Filter'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'


  '/filters/{filter_id}':
    get:
      summary: select a filter
      description: This works only with internals id
      tags:
        - Filters
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Filter_id_in_path'

      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Filter'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

    put:
      summary: update a filter
      description: Overwrites the existing filter, but you cannot modifty its project_id
      tags:
        - Filters
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Filter_id_in_path'
        - $ref: '#/parameters/Filter_put_body'
      responses:
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

    delete:
      summary: delete a filter
      tags:
        - Filters
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Filter_id_in_path'
      responses:
        '204':
          $ref: '#/responses/204_no_content'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'




#updload file && csv


  '/upload/pdf':

    post:
      summary: update the pdf file
      description: update and parse pdf file and return the fileds by json
      tags:
        - Projects Papers
      security:
        - basicAuth: []
      consumes:
        - multipart/form-data

      parameters:
        - $ref: '#/parameters/Pdf_post_body'


      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Pdf'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

  '/upload/csv':

    post:
      summary: update the csv file
      description: update and parse csv file and return the list of paper saved
      tags:
        - Projects Papers
      security:
        - basicAuth: []
      consumes:
        - multipart/form-data

      parameters:
        - $ref: '#/parameters/Csv_post_body'


      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Project_papers'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'






# screenings ==============================================================


  '/screenings':

    get:
      summary: get list of project to screening
      description: get list of project associated with user by screening table
      tags:
        - Screenings
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/OrderBy'
        - $ref: '#/parameters/Sort'
        - $ref: '#/parameters/Start'
        - $ref: '#/parameters/Count'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Result_screenings'
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'






  '/screenings/automated':

    post:
      summary: automated screening
      description: evaluate all projected paper and assign as screened for paper with confidence value greater than threshold
      tags:
        - Screenings
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/AutomatedScreening_post_body'
      responses:
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'


    get:
      summary: get automated screening status
      description: get automated screening status (in percentage), now it only return a random number
      tags:
        - Screenings
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_id'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            description: progress in percentage
            example: 87
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'





  '/screenings/{screening_id}':

    get:
      summary: get screening data
      description: get the data of a specific screening
      tags:
        - Screenings
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Screening_id_in_path'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Screening'
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'

  '/screenings/{screening_id}/next':

    get:
      summary: get next paper to vote
      description: get a paper to vote from a specific project
      tags:
        - Screenings
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Screening_id_in_path'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Project_paper'
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'





  '/votes':

    get:
      summary: get the votes
      description: get the votes of a specific project
      tags:
        - Votes
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Project_id'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Votes'
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'


    post:
      summary: insert a vote
      description: insert a vote in the project
      tags:
        - Votes
      security:
        - basicAuth: []

      parameters:
        - $ref: '#/parameters/Vote_post_body'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Vote'
        '204':
          $ref: '#/responses/204_no_content'
        '400':
          $ref: '#/responses/400_bad_request'
        '401':
          $ref: '#/responses/401_unauthorized'
        '404':
          $ref: '#/responses/404_not_found'
        '500':
          $ref: '#/responses/500_internal_server_error'





#responses ===================================================

responses:
  Unknown_error:
    description: unhandled error
    schema:
      $ref: '#/definitions/Error'
  200_ok_only:
    description: OK
  201_created:
    description: Created
  204_no_content:
    description: No Content
  400_bad_request:
    description: Bad Request
    schema:
      $ref: '#/definitions/Error'
  401_unauthorized:
    description: 'Unauthorized'
    schema:
      $ref: '#/definitions/Error'
  403_forbidden:
    description: Forbidden
    schema:
      $ref: '#/definitions/Error'
  404_not_found:
    description: Not Found
    schema:
      $ref: '#/definitions/Error'
  405_method_not_allowed:
    description: Method Not Allowed
    schema:
      $ref: '#/definitions/Error'
  409_conflict:
    description: Conflict
    schema:
      $ref: '#/definitions/Error'
  500_internal_server_error:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Error'




#definitions ===================================================

definitions:
  Error:
    properties:
      statusCode:
        type: integer
      payload:
        type: object
        properties:
          statusCode:
            type: integer
          error:
            type: string
          message:
            type: string
      headers:
        type: object

  Paper_data:
    type: object
    properties:
      authors:
        type: string
        example: >-
          Bygholm, Hansen
      title:
        type: string
        example: x relations to y
      year:
        type: string
        example: "2017"
        format: date
        pattern: "YYYY"
      date:
        type: string
        example: "2017-10-01"
        format: date
        pattern: "YYYY-MM-DD"
      source_title:
        type: string
        example: Educations in y
      link:
        type: string
        example: "https://scopus.com/bla/inward?uri=2412414141"
      abstract:
        type: string
        example: >-
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc dolor
          magna, ultricies eu mauris at, vehicula elementum felis. Nunc
          vulputate egestas turpis in venenatis. Donec felis ligula, iaculis at
          lacus at, venenatis placerat ligula. Integer orci libero, tincidunt id
          lobortis in, varius a ipsum. Vivamus placerat eros in magna laoreet
          eleifend[..]
      document_type:
        type: string
        example: article
      source:
        type: string
        example: scopus
      eid:
        type: string
        example: >-
          2-s2.0-45252342358235
      abstract_structured:
        type: string
        example: "0"
      filter_oa_include:
        type: string
        example: "1"
      filter_study_include:
        type: string
        example: "0"
      notes:
        type: string
        example: "note"
      manual:
        type: string
        example: "0"
      doi:
        type: string
        example: "10.1000/182"

  Paper:
    type: object
    properties:
      ID:
        type: integer
        description: the ID on the internal database
        example: 1
      date_created:
        type: string
        format: date-time
        example:  "2017-07-21T17:32:28Z"
      date_last_modified:
        type: string
        format: date-time
        example:  "2017-09-24T18:38:00Z"
      data:
        $ref: '#/definitions/Paper_data'

  Papers:
    type: array
    items:
      $ref: '#/definitions/Paper'


  Result_of_paper_search:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Paper_data'
      totalResults:
        type: integer


  Paper_data_with_automated_search_confidence:
    type: object
    properties:
      authors:
        type: string
        example: >-
          Bygholm, Hansen
      title:
        type: string
        example: x relations to y
      year:
        type: string
        example: "2017"
        format: date
        pattern: "YYYY"
      date:
        type: string
        example: "2017-10-01"
        format: date
        pattern: "YYYY-MM-DD"
      source_title:
        type: string
        example: Educations in y
      link:
        type: string
        example: "https://scopus.com/bla/inward?uri=2412414141"
      abstract:
        type: string
        example: >-
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc dolor
          magna, ultricies eu mauris at, vehicula elementum felis. Nunc
          vulputate egestas turpis in venenatis. Donec felis ligula, iaculis at
          lacus at, venenatis placerat ligula. Integer orci libero, tincidunt id
          lobortis in, varius a ipsum. Vivamus placerat eros in magna laoreet
          eleifend[..]
      document_type:
        type: string
        example: article
      source:
        type: string
        example: scopus
      eid:
        type: string
        example: >-
          2-s2.0-45252342358235
      abstract_structured:
        type: string
        example: "0"
      filter_oa_include:
        type: string
        example: "1"
      filter_study_include:
        type: string
        example: "0"
      notes:
        type: string
        example: "note"
      manual:
        type: string
        example: "0"
      doi:
        type: string
        example: "10.1000/182"
      metadata:
        type: object
        properties:
          automatedSearch:
            type: object
            properties:
              value:
                type: string
                example: "0.78"
              filters:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 4
                      description: the id of the filter
                    filterValue:
                      type: number
                      example: 0.78
                      description: the confidence for the filter





  Result_of_paper_search_with_automated_search_confidence:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Paper_data_with_automated_search_confidence'
      totalResults:
        type: integer




  Paper_data_with_screened_result:
    type: object
    properties:
      authors:
        type: string
        example: >-
          Bygholm, Hansen
      title:
        type: string
        example: x relations to y
      year:
        type: string
        example: "2017"
        format: date
        pattern: "YYYY"
      date:
        type: string
        example: "2017-10-01"
        format: date
        pattern: "YYYY-MM-DD"
      source_title:
        type: string
        example: Educations in y
      link:
        type: string
        example: "https://scopus.com/bla/inward?uri=2412414141"
      abstract:
        type: string
        example: >-
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc dolor
          magna, ultricies eu mauris at, vehicula elementum felis. Nunc
          vulputate egestas turpis in venenatis. Donec felis ligula, iaculis at
          lacus at, venenatis placerat ligula. Integer orci libero, tincidunt id
          lobortis in, varius a ipsum. Vivamus placerat eros in magna laoreet
          eleifend[..]
      document_type:
        type: string
        example: article
      source:
        type: string
        example: scopus
      eid:
        type: string
        example: >-
          2-s2.0-45252342358235
      abstract_structured:
        type: string
        example: "0"
      filter_oa_include:
        type: string
        example: "1"
      filter_study_include:
        type: string
        example: "0"
      notes:
        type: string
        example: "note"
      manual:
        type: string
        example: "0"
      doi:
        type: string
        example: "10.1000/182"
      metadata:
        type: object
        description: "this will be present in case of manual screening"
        properties:
          screened:
            type: "string"
            enum: ["manual", "screened", "auto"]
          votes:
            type: array
            items:
              type: object
              properties:
                answer:
                  type: string
                  enum: ["0","1","2"]
                user:
                  type: object
                  properties:
                    name: 
                      type: string
                    picture:
                      type: string
                      description: url to image
          screening:
            type: object
            properties:
              result:
                type: string
                example: "1 or 0"
              source:
                type: string
                example: "automated screening"





  Result_of_paper_search_with_screened_result:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Paper_data_with_screened_result'
      totalResults:
        type: integer



  Project_paper:
    type: object
    properties:
      ID:
        type: integer
        description: the ID on the internal database
        example: 1
      date_created:
        type: string
        format: date-time
        example:  "2017-07-21T17:32:28Z"
      date_last_modified:
        type: string
        format: date-time
        example:  "2017-09-24T18:38:00Z"
      data:
        $ref: '#/definitions/Paper_data'
      project_id:
        type: integer
        description: the ID of project associated
        example: 1

  Project_papers:
    type: array
    items:
      $ref: '#/definitions/Project_paper'


  Project_paper_for_post:
    type: object
    properties:
      project_id:
        type: integer
        example: "1"
      arrayEid:
        type: array
        items:
          type: string
          example: "2-s2.0-85062651974"


  Project_paper_custom_for_post:
    type: object
    properties:
      project_id:
        type: integer
        example: "1"
      authors:
        type: string
        example: >-
          Bygholm, Hansen
      title:
        type: string
        example: x relations to y
      year:
        type: string
        example: "2017"
        format: date
        pattern: "YYYY"
      date:
        type: string
        example: "2017-10-01"
        format: date
        pattern: "YYYY-MM-DD"
      source_title:
        type: string
        example: Educations in y
      link:
        type: string
        example: "https://scopus.com/bla/inward?uri=2412414141"
      abstract:
        type: string
        example: >-
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc dolor
          magna, ultricies eu mauris at, vehicula elementum felis. Nunc
          vulputate egestas turpis in venenatis. Donec felis ligula, iaculis at
          lacus at, venenatis placerat ligula. Integer orci libero, tincidunt id
          lobortis in, varius a ipsum. Vivamus placerat eros in magna laoreet
          eleifend[..]
      document_type:
        type: string
        example: article
      source:
        type: string
        example: scopus
      eid:
        type: string
        example: >-
          2-s2.0-45252342358235
      abstract_structured:
        type: string
        example: "0"
      filter_oa_include:
        type: string
        example: "1"
      filter_study_include:
        type: string
        example: "0"
      notes:
        type: string
        example: "note"
      manual:
        type: string
        example: "0"
      doi:
        type: string
        example: "10.1000/182"


  Project_data:
    type: object
    properties:
      name:
        type: string
        example: "robots research"
      manual_screening_type:
        type: string
        enum: ["single-predicate", "multi-predicate", undefined]
      description:
        type: string
        example: >-
          orem ipsum dolor sit amet, consectetur adipiscing elit. Nunc dolor
          magna, ultricies eu mauris at, vehicula elementum felis. Nunc
          vulputate egestas turpis in venenatis. Donec felis ligula, iaculis at

  Project:
    type: object
    properties:
      ID:
        type: integer
        description: the ID on the internal database
        example: 1
      date_created:
        type: string
        format: date-time
        example:  "2017-07-21T17:32:28Z"
      date_last_modified:
        type: string
        format: date-time
        example:  "2017-09-24T18:38:00Z"
      data:
        $ref: '#/definitions/Project_data'

  Projects:
    type: array
    items:
      $ref: '#/definitions/Project'
      

  Result_projects:
    type: object
    properties:
      results:
        $ref : '#/definitions/Projects'
      totalResults:
        type: integer
      
  Result_screenings:
    type: object
    properties:
      results:
        $ref : '#/definitions/Screenings'
      totalResults:
        type: integer

  Pdf:
    type: object
    properties:
      title:
        type: string
        description: the title of paper parsed
        example: the machine learning is future
      abstract:
        type: string
        description: the abstract of paper parsed
        example:  bra bra bra bra bra bra
      year:
        type: integer
        example:  2017
      authors:
        type: string
        example: mario rosi, luigi mr, aa bbb

  User_data:
    type: object
    properties:
      email:
        type: string
      name:
        type: string
      picture:
        type: string

  User:
    type: object
    properties:
      ID:
        type: integer
        description: the ID on the internal database
        example: 1
      date_created:
        type: string
        format: date-time
        example:  "2017-07-21T17:32:28Z"
      date_last_modified:
        type: string
        format: date-time
        example:  "2017-09-24T18:38:00Z"
      data:
        $ref: '#/definitions/User_data'

  Users:
    type: array
    items:
      $ref: '#/definitions/User'


  Filter_data:
    type: object
    properties:
      name:
        type: string
        example: "filter a"
      predicate:
        type: string
      inclusion_description:
        type: string
      exclusion_description:
        type: string

  Filter_data_no_name:
    type: object
    properties:
      predicate:
        type: string
      inclusion_description:
        type: string
      exclusion_description:
        type: string


  Filter:
    type: object
    properties:
      ID:
        type: integer
        description: the ID on the internal database
        example: 1
      date_created:
        type: string
        format: date-time
        example:  "2017-07-21T17:32:28Z"
      date_last_modified:
        type: string
        format: date-time
        example:  "2017-09-24T18:38:00Z"
      data:
        $ref: '#/definitions/Filter_data'
      project_id:
        type: integer



  Filters:
    type: array
    items:
      $ref: '#/definitions/Filter'



  Screening_data:
    type: object
    properties:
      tags:
        type: array
        items:
          type: string
      manual_screening_type:
        type: string
        enum: ["single-predicate", "multi-predicate", undefined]
      name:
        type: string
        description: it's the same as the project name linked to this screening

  Screening:
    type: object
    properties:
      ID:
        type: integer
        description: the ID on the internal database
        example: 1
      date_created:
        type: string
        format: date-time
        example:  "2017-07-21T17:32:28Z"
      date_last_modified:
        type: string
        format: date-time
        example:  "2017-09-24T18:38:00Z"
      project_id:
        type: integer
      user_id:
        type: integer
      data:
        $ref: '#/definitions/Screening_data'
      progress:
        type: object
        properties:
          totalPapers:
            type: number
            description: "total papers in the project"
          screenedPapers:
            type: number
            description: "number of papers already screened by the user"


  Screenings:
    type: array
    items:
      $ref: '#/definitions/Screening'

  Vote_data:
    type: object
    properties:
      metadata:
        type: object
        properties:
          type:
            type: string
            enum:
              - single-predicate
              - multi-predicate
          highlights:
            type: array
            items:
              type: object
              properties:
                filter_id:
                  type: number
                  description: "it will be present in case of multi-predicate screening"
                filter_predicate:
                  type: string
                  description: "it will be present in case of multi-predicate screening"
                filterHighlights:
                  type: array
                  items:
                    type: object
                    description: "there is no standard format for the highlights yet"
                outcome:
                  type: number
                  enum:
                    - 0
                    - 1
                    - 2
                  description: "0 = no, 1 = yes, 2 = undecided"
          tags:
            type: array
            items:
              type: object

  Vote:
    type: object
    properties:
      ID:
        type: integer
        description: the ID on the internal database
        example: 1
      date_created:
        type: string
        format: date-time
        example:  "2017-07-21T17:32:28Z"
      date_last_modified:
        type: string
        format: date-time
        example:  "2017-09-24T18:38:00Z"
      user_id:
        type: integer
      project_paper_id:
        type: integer
      project_id:
        type: integer
      data:
        $ref: '#/definitions/Vote_data'

  Votes:
    type: array
    items:
      $ref: '#/definitions/Vote'

#parameters==============================================

parameters:

  Query:
    in: query
    name: query
    type: string
    description: keywords to search
    required: true

  Query_optional:
    in: query
    name: query
    type: string
    description: keywords to search



  SearchBy:
    in: query
    name: searchBy
    type: string
    enum:
      - all
      - author
      - content
      - advanced
    description: the attribute for search on the specific field of papers

  OrderByForSearch:
    in: query
    name: orderBy
    type: string
    enum:
      - date
      - title
    description: the attribute for sorting the papers you want to receive

  OrderBy:
    in: query
    name: orderBy
    type: string
    description: the attribute for sorting the papers you want to receive

  Year:
    in: query
    name: year
    type: string
    format: date
    pattern: "YYYY"
    description: the year when the papers to search were published

  Sort:
    in: query
    name: sort
    type: string
    enum:
      - ASC
      - DESC
    description: sort ascending or descending


  Start:
    in: query
    name: start
    type: integer
    description: the offset where will start to get the papers

  Count:
    in: query
    name: count
    type: integer
    description: select the maximum amount of papers you want to receive

  Scopus:
    in: query
    name: scopus
    type: string
    description: select the source of research

  ArXiv:
    in: query
    name: arXiv
    type: string
    description: select the source of research



  Project_id:
    in: query
    name: project_id
    description: the internal id of a project
    type: integer
    required: true




  Project_id_in_path:
    in: path
    name: project_id
    description: the internal id of a project
    type: integer
    required: true

  Project_paper_id_in_path:
    in: path
    name: project_paper_id
    description: the internal id of a project_paper
    type: integer
    required: true


  Paper_post_put_body:
    in: body
    name: body
    description: content of the paper to be stored
    required: true
    schema:
      $ref: "#/definitions/Paper_data"
      required:
        - authors
        - title
        - year
        - date
        - source_title
        - link
        - abstract
        - document_type
        - source
        - eid
        - abstract_structured
        - filter_oa_include
        - filter_study_include
        - notes
        - manual
        - doi

  Project_post_put_body:
    in: body
    name: body
    description: basic content of the project to be stored
    required: true
    schema:
      $ref: "#/definitions/Project_data"
      required:
        - name
        - description

  Project_paper_post_body:
    in: body
    name: body
    description: project_id and arrayEid
    required: true
    schema:
      $ref: "#/definitions/Project_paper_for_post"
      required:
        - project_id
        - arrayEid

  Project_paper_custom_post_body:
    in: body
    name: body
    description: project_id and new paper object
    required: true
    schema:
      $ref: "#/definitions/Project_paper_custom_for_post"
      required:
        - project_id
        - authors
        - title
        - year
        - date
        - source_title
        - link
        - abstract
        - document_type
        - source
        - eid
        - abstract_structured
        - filter_oa_include
        - filter_study_include
        - notes
        - manual
        - doi

  Pdf_post_body:
    in: body
    name: file
    schema:
      type: object
      description: the pdf file to parse
    required: true


  Csv_post_body:
    in: body
    name: body
    description: the body data to parse csv file
    required: true
    schema:
      type: object
      properties:
        file:
          type: object
        project_id:
          type: integer
        fields:
          type: string
          description: json string where it maps the different filedName of csv on property of object paper
          example: '{"authors":"Authors","title":"Title","year":"Year","date":"Source title","source_title":"title","link":"link","abstract":"abstract","document_type":"document_type","source":"source","eid":"EID","abstract_structured":"abstract_structured","filter_oa_include":"filter_oa_include","filter_study_include":"filter_study_include","notes":"notes","manual":"manual","doi":"doi"}'
      required:
        - file
        - project_id
        - fields


  Similar_paper_post_body:
    in: body
    name: body
    description: the basic post data to search similar paper
    required: true
    schema:
      type: object
      properties:
        paperData:
          type: object
          properties:
            title:
              type: string
        start:
          type: integer
        count:
          type: integer
      required:
        - paperData
        - start
        - count

  Automated_search_post_body:
    in: body
    name: body
    description: the basic post data to automated search
    required: true
    schema:
      type: object
      properties:
        project_id:
          type: number
        min_confidence:
          type: number
        max_confidence:
          type: number
        start:
          type: integer
        count:
          type: integer
      required:
        - project_id



  Email_post_body:
    in: body
    name: body
    schema:
      type: object
      properties:
        email:
          description: the shared user's email
          type: string
      required:
        - email
    required: true



  Filter_id:
    in: query
    name: filter_id
    description: the internal id of a filter
    type: integer
    required: true


  Filter_id_in_path:
    in: path
    name: filter_id
    description: the internal id of a filter
    type: integer
    required: true

  Filter_put_body:
    in: body
    name: body
    description: filter data to be stored
    required: true
    schema:
      $ref: "#/definitions/Filter_data_no_name"
      required:
        - predicate
        - inclusion_description
        - exclusion_description

  Filter_post_body:
    in: body
    name: body
    description: filter data and project id
    required: true
    schema:
      type: object
      properties:
        filter:
          $ref: "#/definitions/Filter_data_no_name"
          required:
            - predicate
            - inclusion_description
            - exclusion_description
        project_id:
          type: integer
          example: 1
      required:
        - filter
        - project_id


  User_id_post_body:
    in: body
    name: body
    schema:
      type: object
      properties:
        user_id:
          description: the selected user's id
          type: integer
      required:
        - user_id
    required: true


  User_id_in_path:
    in: path
    name: user_id
    description: the internal id of a user
    type: integer
    required: true


  User_id:
    in: query
    name: user_id
    description: the internal id of a user
    type: integer
    required: true



  AutomatedScreening_post_body:
    in: body
    name: body
    schema:
      type: object
      properties:
        project_id:
          description: the internal id of a project
          type: integer
        threshold:
          description: the threshold value on confidence score
          type: number
          example: 0.50
      required:
        - project_id
        - threshold
    required: true



  Type:
    in: query
    name: type
    type: string
    enum:
      - all
      - manual
      - screened
      - backlog
    description: the type of projectPaper to select




  Screenings_post_body:
    in: body
    name: body

    schema:
      type: object
      properties:
        array_user_ids:
          type: array
          items:
            type: integer
          example: [1,2,3]
        manual_screening_type:
          type: string
          description: type of manual screening for this project
          enum:
            - single-predicate
            - multi-predicate

      required:
        - array_user_ids
        - manual_screening_type
    required: true


  Screenings_put_body:
    in: body
    name: body

    schema:
      type: object
      properties:
        array_user_ids:
          type: array
          items:
            type: integer
          example: [1,2,3]
      required:
        - array_user_ids
    required: true

  Screening_id_in_path:
    in: path
    name: screening_id
    description: the internal id of a screening
    type: integer
    required: true

  Vote_post_body:
    in: body
    name: body

    schema:
      type: object
      properties:
        project_paper_id:
          type: integer
        vote:
          $ref: '#/definitions/Vote_data'

      required:
        - vote
        - project_paper_id
    required: true




securityDefinitions:
  basicAuth:
    type: basic
